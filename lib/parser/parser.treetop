
grammar StoutLang
  include Infix
  include Types
  include Methods
  include Functions
  include Strings
  include Ifs
  include Lists
  include Structs
  include InstanceVars
  include Defs
  include CFuncs

  rule program
    # Expressions should be separated by line breaks (which includes ; )
    # We want to allow a program to be empty also `{ }`
    space? line_break? pr1:(assign:assignment space?)? program:(line_break assign:assignment space?)* line_break? {
      def to_ast
        if pr1.respond_to?(:assign) && pr1.assign.respond_to?(:to_ast)
          exprs = [pr1.assign.to_ast]
        else
          exprs = []
        end

        exprs += program.elements.map {|e| e.assign.to_ast }

        Block.new(exprs, nil, self)
      end
    }

  end

  rule expression
    assignment
  end

  rule assignment
    ident:identifier space? assign_type:type_sig? space? '=' space? exp:expression {
      def to_ast
        assign_type_sig = assign_type.respond_to?(:to_ast) ? assign_type.to_ast : nil

        Assignment.new(ident.to_ast, exp.to_ast, assign_type_sig, self)
      end
    } / define_method
  end

  # infix chains

  rule function_call_with_args
    # Function calls without args parse as an identifier and we have to convert
    # them at compile time.

    method_call_name args:method_call_args space? block:block? {
      # Doesn't return the AST node, just the parts we need to build in
      # method chain
      def to_ast
        function_name = method_call_name.to_ast

        # parens are required in function_call_with_args
        args_ast = args.respond_to?(:to_ast) ? args.to_ast : []

        # If a block was passed, add it to the args
        args_ast << block.to_ast if block && block.respond_to?(:to_ast)

        FunctionCall.new(function_name, args_ast, self).make_children!(args_ast)
      end
    }
  end

  rule boolean_literal
    lit:(true_literal / false_literal) {
      def to_ast
        lit.to_ast
      end
    }
  end

  rule true_literal
    'true' {
      def to_ast
        TrueLiteral.new(self)
      end
    }
  end

  rule false_literal
    'false' {
      def to_ast
        FalseLiteral.new(self)
      end
    }
  end
  

  rule block
    '|' space? args:method_call_args? space? '|' space? '{' program '}' {
      def to_ast
        block = program.to_ast
        if args.respond_to?(:to_ast)
          # Assign the args if this block take arguments
          # We're doing this here so we can use the program rule without args
          # in other places. 
          block.args = args.to_ast
        end
      end
    } / 
    '{' program '}' {
      def to_ast
        program.to_ast
      end
    }
  end


  rule primary
    comment / struct / lib / if_expression / list / boolean_literal / function_call_with_args / property / identifier / type / float / integer / string / parens
  end


  rule comment
    '#' message:[^\n]* '\n'? {
      def to_ast
        Comment.new(message.text_value, message)
      end
    }
  end

  rule float
    float:(('+' / '-')? [0-9]+ ('.' [0-9]+) (exponent)?) {
      def to_ast
        FloatLiteral.new(float.text_value.to_f, self)
      end
    }
  end

  rule exponent
    [eE] '-'? [0-9]+
  end

  rule integer
    ('+' / '-')? [0-9]+ {
      def to_ast
        IntegerLiteral.new(text_value.to_i, self)
      end
    }
  end

  rule digit
    [0-9]
  end


  rule escaped_char
    '\\' ["] / '\\' [n] / '\\' [t] / '\\' [\\]
  end

  # Variable names
  rule identifier
    # We make sure the first character isn't followed by a ` in order to support
    # shell heredoc language specification
    [@a-z] !'`' [a-zA-Z0-9_]* {
      def to_ast
        Identifier.new(text_value, self)
      end
    }
  end

  rule parens
    '(' exp:expression ')' {
      def to_ast
        exp.to_ast
      end
    }
  end


  rule space
    # Match spaces and tabs, but not new lines
    ([ \t] / comment)+
  end

  rule nbsp
    [\s]+
  end

  # TODO: this may be slow, especially with EOF
  rule line_break
    ((space? ([\n\r;]) space?)+ / ((space / [\n\r;])* eof)) {
      def to_ast
        "\n"
      end
    }
  end

  # A space or a line break
  rule spbr
    line_break / space
  end

  rule eof
    !.
  end
  
end