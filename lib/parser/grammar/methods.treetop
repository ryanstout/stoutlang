grammar Methods

  rule method_name
    [a-zA-Z] [a-zA-Z0-9_]* {
      def to_ast
        text_value
      end
    } / method_name_operators {
      def to_ast
        text_value
      end
    }
  end

  # Methods can also be defined with operators for the method name
  rule method_name_operators
    '%>' / '..' / '...' / '||' / '&&' / '==' / '!=' / '<' / '<=' / '>' / '>=' / '|' / '^' / '&' / '<<' / '>>' / '+' / '-' / '*' / '/' / '%' / '^'
  end


  # Methods are syntactic sugar for functions
  # obj.method_name(arg1) is the same as method_name(obj, arg1)
  rule method_chain
    primary ('.' method_call)* {
      def to_ast
        # Consume left to right
        # Start with the receiver
        method_call_receiver = primary.to_ast
        elements[1].elements.map do |call_elements|
          function_name, method_args = call_elements.method_call.to_ast
          args = [method_call_receiver] + method_args
          
          method_call_receiver = FunctionCall.new(function_name, args, call_elements.method_call)
        end

        return method_call_receiver
      end
    }
  end


  rule method_call
    method_name space? args:method_call_args? space? block:block? {
      # Doesn't return the AST node, just the parts we need to build in
      # method chain
      def to_ast
        function_name = method_name.to_ast
        # If there are no parens, args will be a SyntaxNode that doesn't respond
        # to :to_ast
        args_ast = args && args.respond_to?(:to_ast) ? args.to_ast : []

        # If a block was passed, add it to the args
        args_ast << block.to_ast if block && block.respond_to?(:to_ast)

        return function_name, args_ast
      end
    }
  end

  rule method_call_args
    '(' space? args_main:(first_arg:expression rest_args:(',' space? exp:expression)*)? space? ')' {
      def to_ast

        if args_main && args_main.respond_to?(:first_arg)
          first_arg = args_main.first_arg.to_ast
          rest_args = args_main.rest_args.elements.map {|e| e.exp.to_ast }

          return [first_arg] + rest_args
        else
          return []
        end
      end
    }
  end



end