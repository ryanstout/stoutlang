grammar Strings


  rule double_quoted_string
    '"' str:(string_content / escape_sequence / interpolation)* '"' {
      def to_ast
        parts = str.elements.map(&:to_ast)

        # Merge adjacent string parts
        merged_parts = parts.chunk { |part| part.is_a?(String) }.map do |is_string, parts|
          if is_string
            parts.join
          else
            parts[0]
          end
        end
        StringLiteral.new(merged_parts, self)
      end
    }
  end

  rule string_content
    [^"$\\]+ {
      def to_ast
        text_value
      end
    }
  end

  rule escape_sequence
    '\\' esc:(
        'n' / 't' / 'r' / '"' / '\\' / 'b' / 'f' / unicode_escape
    ) {
      def to_ast
        case esc.text_value
        when 'n' then "\n"
        when 't' then "\t"
        when 'r' then "\r"
        when '"' then "\""
        when '\\' then "\\"
        when 'b' then "\b"
        when 'f' then "\f"
        else
          esc.to_ast # For unicode_escape, this calls its to_ast method
        end
      end
    }
  end

  rule unicode_escape
    'u' hex_digit hex_digit hex_digit hex_digit {
      def to_ast
        [text_value[1..4].to_i(16)].pack("U*")
      end
    }
  end

  rule hex_digit
    [0-9a-fA-F] {
      def to_ast
        text_value
      end
    }
  end

  rule interpolation
    '${' program:program '}' {
      def to_ast
        StringInterpolation.new(program.to_ast, self)
      end
    }
  end

  rule string
    heredoc / double_quoted_string / shell_heredoc / shell_string
  end

  # Heredocs
  rule heredoc
    '"""' heredoc_content:heredoc_content '"""' {
      def to_ast
        parts = heredoc_content.elements.map(&:to_ast)
        # Merge adjacent string parts
        merged_parts = parts.chunk { |part| part.is_a?(String) }.map do |is_string, parts|
          if is_string
            parts.join
          else
            parts[0]
          end
        end
        StringLiteral.new(merged_parts, self)
      end
    }
  end

  rule heredoc_content
    (heredoc_string_content / escape_sequence / interpolation)* {
      def to_ast
        elements.map(&:to_ast)
      end
    }
  end

  rule heredoc_string_content
  (!'"""' [^$\\])+ {
      def to_ast
        text_value
      end
    }
  end

  rule shell_string
    language:[a-z]* '`' str:(escape_sequence / interpolation / shell_string_content / single_dollar)* '`' {
      def to_ast
        lang = language.text_value
        lang = nil if lang.empty?
        parts = str.elements.map(&:to_ast)

        # Merge adjacent string parts
        merged_parts = parts.chunk { |part| part.is_a?(String) }.map do |is_string, parts|
          if is_string
            parts.join
          else
            parts[0]
          end
        end
        ShellStringLiteral.new(merged_parts, lang, self)
      end
    }
  end

  rule shell_string_content
    (!'`' [^$\\])+ {
      def to_ast
        text_value
      end
    }
  end

  rule single_dollar
    '$' {
      def to_ast
        text_value
      end
    }
  end

  rule shell_heredoc
    # Only allow 1 character for the language prefix, will keep it from doing
    # too far of a look ahead.
    language:[a-z]? '```' shell_heredoc_content:shell_heredoc_content '```' {
      def to_ast
        lang = language.text_value
        lang = nil if lang.empty?
          

        parts = shell_heredoc_content.elements.map(&:to_ast)
        # Merge adjacent string parts
        merged_parts = parts.chunk { |part| part.is_a?(String) }.map do |is_string, parts|
          if is_string
            parts.join
          else
            parts[0]
          end
        end
        ShellStringLiteral.new(merged_parts, lang, self)
      end
    }
  end

  rule shell_heredoc_content
    (escape_sequence / interpolation / shell_heredoc_string_content / single_dollar)* {
      def to_ast
        elements.map(&:to_ast)
      end
    }
  end

  rule shell_heredoc_string_content
    (!'```' [^$\\])+ {
      def to_ast
        text_value
      end
    }
  end


end