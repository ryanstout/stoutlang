grammar Types

  rule type
    [A-Z] [a-zA-Z0-9_]* {
      def to_ast
        Type.new(text_value, self)
      end
    }
  end

  rule type_expression
    type_arrow / type_infix_chain
  end

  rule type_arrow
    space? type_primary:type_infix_chain space? '->' space? type_expression:type_expression space? {
      def to_ast
        args = [type_primary.to_ast, type_expression.to_ast]
        FunctionCall.new('->', args, self)
      end
    }
  end

  rule type_primary
    type_variable / type / type_parens
    # / type_parens
  end

  rule type_parens
    '(' space? type_expression space? ')' {
      def to_ast
       #rest_types:(',' space? type_expesssion space?)*
        #if rest_types.respond_to?(:to_ast)
        #  return [type_expression.to_ast, *rest_types.elements.map(&:type_expression).map(&:to_ast)]
        #else
          return type_expression.to_ast
        #end
      end
    }
  end

  rule type_infix_chain
    type_primary:type_primary (type_infix_op type_infix_chain)* {
      def to_ast
        # Consume left to right
        # Start with the leftmost primary
        left = type_primary.to_ast

        elements[1].elements.each do |op_and_right|
          op, right = op_and_right.elements.map(&:to_ast)

          if op == ','
            # Instead of creating a FunctionCall, we merge these into a list

            if left.is_a?(Array)
              return left + [right]
            else
              return [left, right]
            end
          end

          args = [left, right]

          left = FunctionCall.new(op, args, op_and_right.type_infix_op, self).make_children!(args)
        end

        return left
      end
    }
  end

  rule type_sig
    ':' space? type:type_expression {
      def to_ast
        TypeSig.new(type.to_ast, self)
      end
    }
  end

  # Type variables start with a ' to differentiate them from normal variables.
  # This differentiation lets you only parameterize the at the class level,
  # then reuse the variables anywhere in the class
  rule type_variable
    '\'' [a-z] [a-zA-Z0-9_]* {
      def to_ast
        TypeVariable.new(text_value[1..-1], self)
      end
    }
  end

  rule type_infix_op
    # We want to process lower precedence operators first
    space? operator:('||' / '&&' / '|' / '&' / '<' / ',') space? {
      def to_ast
        operator.text_value
      end
    }
  end

end