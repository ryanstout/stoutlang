grammar Blocks
  rule exps
    '{' program '}' {
      def to_ast
        program.to_ast
      end
    } / 
    '{' program '}' {
      def to_ast
        program.to_ast
      end
    }
  end

  rule block
    block_args_opt:('|' space? args:block_args? space? '|')? space? exps {
      def to_ast
        block = exps.to_ast
        args = nil
        if block_args_opt && block_args_opt.respond_to?(:args) && block_args_opt.args.respond_to?(:to_ast)
          # Assign the args if this block take arguments
          # We're doing this here so we can use the exps rule without args
          # in other places. 
          args = block_args_opt.args.to_ast
        end
        Block.new(args, block, self)
      end
    }
  end

  rule block_args
    first:arg space? rest:(',' space? arg:arg)* {
      def to_ast
        [first.to_ast] + rest.elements.map { |r| r.arg.to_ast }
      end
    }
  end

end