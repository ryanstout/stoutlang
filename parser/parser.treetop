grammar StoutLang
  include Types
  include Methods
  include Functions

  rule program
    space? program:(assignment)* space? {
      def to_ast
        Ast::Block.new(program.elements.map(&:to_ast))
      end
    }
  end

  rule expression
    exp:(assignment) {
      def to_ast
        exp.to_ast
      end
    }
  end

  rule assignment
    ident:identifier space? assign_type:type_sig? space? '=' space? exp:expression {
      def to_ast
        assign_type_sig = assign_type.respond_to?(:to_ast) ? assign_type.to_ast : nil

        Ast::Assignment.new(ident.to_ast, exp.to_ast, assign_type_sig)
      end
    } / exp:define_method {
      def to_ast
        exp.to_ast
      end
    }
  end

  rule define_method
    'def ' method_name:method_name space? args:(method_args:method_args)? space? block:block {
      def to_ast
        Ast::Def.new(method_name.to_ast, args&.method_args&.to_ast, block.to_ast)
      end
    } / exp:infix_chain {
      def to_ast
        exp.to_ast
      end
    }
  end

  rule infix_chain
    method_chain (infix_op expression)* {
      def to_ast
        # Consume left to right
        # Start with the leftmost primary
        left = method_chain.to_ast
        elements[1].elements.each do |op_and_right|
          op, right = op_and_right.elements.map(&:to_ast)
          left = Ast::FunctionCall.new(op, [left, right])
        end

        return left
      end
    } / func:function_call {
      def to_ast
        func.to_ast
      end
    }
  end


  rule block
    '{' program '}' {
      def to_ast
        program.to_ast
      end
    }
  end


  rule primary
    ident:(identifier / float / integer / parens) {
      def to_ast
        ident.to_ast
      end
    }
  end

  rule infix_op
    # We want to process lower precedence operators first
    space? operator:('+' / '-' / '*' / '/') space? {
      def to_ast
        operator.text_value
      end
    }
  end

  rule float
    float:(('+' / '-')? [0-9]+ ('.' [0-9]+) (exponent)?) {
      def to_ast
        FloatLiteral.new(float.text_value.to_f)
      end
    }
  end

  rule exponent
    [eE] '-'? [0-9]+
  end

  rule integer
    ('+' / '-')? [0-9]+ {
      def to_ast
        IntegerLiteral.new(text_value.to_i)
      end
    }
  end

  rule digit
    [0-9]
  end

  # Variable names
  rule identifier
    [a-z] [a-zA-Z0-9_]* {
      def to_ast
        Ast::Identifier.new(text_value)
      end
    }
  end

  rule parens
    '(' exp:expression ')' {
      def to_ast
        exp.to_ast
      end
    }
  end


  rule space
    [\s\n\r]+
  end

  rule non_break_space
    [\s]+
  end

  rule line_break
    [\n\r;]+
  end

  rule eof
    !.
  end
  
end